// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generals.proto

#include "generals.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_generals_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Audio_generals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generals_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_General_generals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generals_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SkillDub_generals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generals_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skin_generals_2eproto;
namespace SGSStruct {
class GeneralPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralPool> _instance;
} _GeneralPool_default_instance_;
class GeneralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<General> _instance;
} _General_default_instance_;
class SkinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Skin> _instance;
} _Skin_default_instance_;
class SkillDubDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillDub> _instance;
} _SkillDub_default_instance_;
class AudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Audio> _instance;
} _Audio_default_instance_;
}  // namespace SGSStruct
static void InitDefaultsscc_info_Audio_generals_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGSStruct::_Audio_default_instance_;
    new (ptr) ::SGSStruct::Audio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SGSStruct::Audio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Audio_generals_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Audio_generals_2eproto}, {}};

static void InitDefaultsscc_info_General_generals_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGSStruct::_General_default_instance_;
    new (ptr) ::SGSStruct::General();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SGSStruct::General::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_General_generals_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_General_generals_2eproto}, {
      &scc_info_Skin_generals_2eproto.base,}};

static void InitDefaultsscc_info_GeneralPool_generals_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGSStruct::_GeneralPool_default_instance_;
    new (ptr) ::SGSStruct::GeneralPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SGSStruct::GeneralPool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneralPool_generals_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeneralPool_generals_2eproto}, {
      &scc_info_General_generals_2eproto.base,}};

static void InitDefaultsscc_info_SkillDub_generals_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGSStruct::_SkillDub_default_instance_;
    new (ptr) ::SGSStruct::SkillDub();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SGSStruct::SkillDub::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SkillDub_generals_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SkillDub_generals_2eproto}, {
      &scc_info_Audio_generals_2eproto.base,}};

static void InitDefaultsscc_info_Skin_generals_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SGSStruct::_Skin_default_instance_;
    new (ptr) ::SGSStruct::Skin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SGSStruct::Skin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skin_generals_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Skin_generals_2eproto}, {
      &scc_info_SkillDub_generals_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_generals_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_generals_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_generals_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_generals_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::GeneralPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::GeneralPool, generals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, name_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, country_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, gender_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, init_physical_limit_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, init_physical_value_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, skills_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, title_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, description_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, package_first_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, package_second_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::General, skin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Skin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Skin, name_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Skin, description_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Skin, image_path_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Skin, skill_dubs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::SkillDub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::SkillDub, skill_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::SkillDub, dub_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::SkillDub, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Audio, dub_),
  PROTOBUF_FIELD_OFFSET(::SGSStruct::Audio, audio_path_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SGSStruct::GeneralPool)},
  { 6, -1, sizeof(::SGSStruct::General)},
  { 22, -1, sizeof(::SGSStruct::Skin)},
  { 31, -1, sizeof(::SGSStruct::SkillDub)},
  { 39, -1, sizeof(::SGSStruct::Audio)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGSStruct::_GeneralPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGSStruct::_General_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGSStruct::_Skin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGSStruct::_SkillDub_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SGSStruct::_Audio_default_instance_),
};

const char descriptor_table_protodef_generals_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016generals.proto\022\tSGSStruct\"3\n\013GeneralPo"
  "ol\022$\n\010generals\030\001 \003(\0132\022.SGSStruct.General"
  "\"\233\002\n\007General\022\014\n\004name\030\001 \001(\t\022#\n\007country\030\002 "
  "\001(\0162\022.SGSStruct.Country\022!\n\006gender\030\003 \001(\0162"
  "\021.SGSStruct.Gender\022\033\n\023init_physical_limi"
  "t\030\004 \001(\005\022\033\n\023init_physical_value\030\005 \001(\005\022\016\n\006"
  "skills\030\006 \003(\t\022\r\n\005title\030\007 \001(\t\022\023\n\013descripti"
  "on\030\010 \001(\t\022\025\n\rpackage_first\030\t \001(\t\022\026\n\016packa"
  "ge_second\030\n \001(\t\022\035\n\004skin\030\013 \001(\0132\017.SGSStruc"
  "t.Skin\"f\n\004Skin\022\014\n\004name\030\001 \001(\t\022\023\n\013descript"
  "ion\030\002 \001(\t\022\022\n\nimage_path\030\003 \001(\t\022\'\n\nskill_d"
  "ubs\030\004 \003(\0132\023.SGSStruct.SkillDub\"G\n\010SkillD"
  "ub\022\r\n\005skill\030\001 \001(\t\022\013\n\003dub\030\002 \003(\t\022\037\n\005audio\030"
  "\003 \003(\0132\020.SGSStruct.Audio\"(\n\005Audio\022\013\n\003dub\030"
  "\001 \001(\t\022\022\n\naudio_path\030\002 \001(\t*6\n\007Country\022\007\n\003"
  "Wei\020\000\022\007\n\003Shu\020\001\022\006\n\002Wu\020\002\022\007\n\003Qun\020\003\022\010\n\004Shen\020"
  "\004*\036\n\006Gender\022\010\n\004male\020\000\022\n\n\006female\020\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_generals_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_generals_2eproto_sccs[5] = {
  &scc_info_Audio_generals_2eproto.base,
  &scc_info_General_generals_2eproto.base,
  &scc_info_GeneralPool_generals_2eproto.base,
  &scc_info_SkillDub_generals_2eproto.base,
  &scc_info_Skin_generals_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_generals_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generals_2eproto = {
  false, false, descriptor_table_protodef_generals_2eproto, "generals.proto", 681,
  &descriptor_table_generals_2eproto_once, descriptor_table_generals_2eproto_sccs, descriptor_table_generals_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_generals_2eproto::offsets,
  file_level_metadata_generals_2eproto, 5, file_level_enum_descriptors_generals_2eproto, file_level_service_descriptors_generals_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_generals_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_generals_2eproto)), true);
namespace SGSStruct {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_generals_2eproto);
  return file_level_enum_descriptors_generals_2eproto[0];
}
bool Country_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_generals_2eproto);
  return file_level_enum_descriptors_generals_2eproto[1];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GeneralPool::InitAsDefaultInstance() {
}
class GeneralPool::_Internal {
 public:
};

GeneralPool::GeneralPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  generals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGSStruct.GeneralPool)
}
GeneralPool::GeneralPool(const GeneralPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      generals_(from.generals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SGSStruct.GeneralPool)
}

void GeneralPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralPool_generals_2eproto.base);
}

GeneralPool::~GeneralPool() {
  // @@protoc_insertion_point(destructor:SGSStruct.GeneralPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeneralPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeneralPool::ArenaDtor(void* object) {
  GeneralPool* _this = reinterpret_cast< GeneralPool* >(object);
  (void)_this;
}
void GeneralPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeneralPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralPool& GeneralPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralPool_generals_2eproto.base);
  return *internal_default_instance();
}


void GeneralPool::Clear() {
// @@protoc_insertion_point(message_clear_start:SGSStruct.GeneralPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeneralPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SGSStruct.General generals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_generals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGSStruct.GeneralPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SGSStruct.General generals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_generals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_generals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGSStruct.GeneralPool)
  return target;
}

size_t GeneralPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGSStruct.GeneralPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SGSStruct.General generals = 1;
  total_size += 1UL * this->_internal_generals_size();
  for (const auto& msg : this->generals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGSStruct.GeneralPool)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGSStruct.GeneralPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGSStruct.GeneralPool)
    MergeFrom(*source);
  }
}

void GeneralPool::MergeFrom(const GeneralPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGSStruct.GeneralPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  generals_.MergeFrom(from.generals_);
}

void GeneralPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGSStruct.GeneralPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralPool::CopyFrom(const GeneralPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGSStruct.GeneralPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralPool::IsInitialized() const {
  return true;
}

void GeneralPool::InternalSwap(GeneralPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  generals_.InternalSwap(&other->generals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void General::InitAsDefaultInstance() {
  ::SGSStruct::_General_default_instance_._instance.get_mutable()->skin_ = const_cast< ::SGSStruct::Skin*>(
      ::SGSStruct::Skin::internal_default_instance());
}
class General::_Internal {
 public:
  static const ::SGSStruct::Skin& skin(const General* msg);
};

const ::SGSStruct::Skin&
General::_Internal::skin(const General* msg) {
  return *msg->skin_;
}
General::General(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGSStruct.General)
}
General::General(const General& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  package_first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_package_first().empty()) {
    package_first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_package_first(),
      GetArena());
  }
  package_second_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_package_second().empty()) {
    package_second_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_package_second(),
      GetArena());
  }
  if (from._internal_has_skin()) {
    skin_ = new ::SGSStruct::Skin(*from.skin_);
  } else {
    skin_ = nullptr;
  }
  ::memcpy(&country_, &from.country_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_physical_value_) -
    reinterpret_cast<char*>(&country_)) + sizeof(init_physical_value_));
  // @@protoc_insertion_point(copy_constructor:SGSStruct.General)
}

void General::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_General_generals_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_first_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_second_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&skin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_physical_value_) -
      reinterpret_cast<char*>(&skin_)) + sizeof(init_physical_value_));
}

General::~General() {
  // @@protoc_insertion_point(destructor:SGSStruct.General)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void General::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_first_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_second_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete skin_;
}

void General::ArenaDtor(void* object) {
  General* _this = reinterpret_cast< General* >(object);
  (void)_this;
}
void General::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void General::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const General& General::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_General_generals_2eproto.base);
  return *internal_default_instance();
}


void General::Clear() {
// @@protoc_insertion_point(message_clear_start:SGSStruct.General)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skills_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  package_first_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  package_second_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && skin_ != nullptr) {
    delete skin_;
  }
  skin_ = nullptr;
  ::memset(&country_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_physical_value_) -
      reinterpret_cast<char*>(&country_)) + sizeof(init_physical_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* General::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SGSStruct.Country country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_country(static_cast<::SGSStruct::Country>(val));
        } else goto handle_unusual;
        continue;
      // .SGSStruct.Gender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::SGSStruct::Gender>(val));
        } else goto handle_unusual;
        continue;
      // int32 init_physical_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          init_physical_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 init_physical_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          init_physical_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string skills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skills();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.skills"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package_first = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_package_first();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.package_first"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package_second = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_package_second();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.General.package_second"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SGSStruct.Skin skin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_skin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* General::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGSStruct.General)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .SGSStruct.Country country = 2;
  if (this->country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_country(), target);
  }

  // .SGSStruct.Gender gender = 3;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // int32 init_physical_limit = 4;
  if (this->init_physical_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_init_physical_limit(), target);
  }

  // int32 init_physical_value = 5;
  if (this->init_physical_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_init_physical_value(), target);
  }

  // repeated string skills = 6;
  for (int i = 0, n = this->_internal_skills_size(); i < n; i++) {
    const auto& s = this->_internal_skills(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.skills");
    target = stream->WriteString(6, s, target);
  }

  // string title = 7;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string description = 8;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  // string package_first = 9;
  if (this->package_first().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_first().data(), static_cast<int>(this->_internal_package_first().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.package_first");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_package_first(), target);
  }

  // string package_second = 10;
  if (this->package_second().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package_second().data(), static_cast<int>(this->_internal_package_second().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.General.package_second");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_package_second(), target);
  }

  // .SGSStruct.Skin skin = 11;
  if (this->has_skin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::skin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGSStruct.General)
  return target;
}

size_t General::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGSStruct.General)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string skills = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(skills_.size());
  for (int i = 0, n = skills_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      skills_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 7;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string package_first = 9;
  if (this->package_first().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_first());
  }

  // string package_second = 10;
  if (this->package_second().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package_second());
  }

  // .SGSStruct.Skin skin = 11;
  if (this->has_skin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skin_);
  }

  // .SGSStruct.Country country = 2;
  if (this->country() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_country());
  }

  // .SGSStruct.Gender gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // int32 init_physical_limit = 4;
  if (this->init_physical_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_init_physical_limit());
  }

  // int32 init_physical_value = 5;
  if (this->init_physical_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_init_physical_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void General::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGSStruct.General)
  GOOGLE_DCHECK_NE(&from, this);
  const General* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<General>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGSStruct.General)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGSStruct.General)
    MergeFrom(*source);
  }
}

void General::MergeFrom(const General& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGSStruct.General)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skills_.MergeFrom(from.skills_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.package_first().size() > 0) {
    _internal_set_package_first(from._internal_package_first());
  }
  if (from.package_second().size() > 0) {
    _internal_set_package_second(from._internal_package_second());
  }
  if (from.has_skin()) {
    _internal_mutable_skin()->::SGSStruct::Skin::MergeFrom(from._internal_skin());
  }
  if (from.country() != 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.init_physical_limit() != 0) {
    _internal_set_init_physical_limit(from._internal_init_physical_limit());
  }
  if (from.init_physical_value() != 0) {
    _internal_set_init_physical_value(from._internal_init_physical_value());
  }
}

void General::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGSStruct.General)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void General::CopyFrom(const General& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGSStruct.General)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool General::IsInitialized() const {
  return true;
}

void General::InternalSwap(General* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skills_.InternalSwap(&other->skills_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  package_first_.Swap(&other->package_first_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  package_second_.Swap(&other->package_second_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(General, init_physical_value_)
      + sizeof(General::init_physical_value_)
      - PROTOBUF_FIELD_OFFSET(General, skin_)>(
          reinterpret_cast<char*>(&skin_),
          reinterpret_cast<char*>(&other->skin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata General::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Skin::InitAsDefaultInstance() {
}
class Skin::_Internal {
 public:
};

Skin::Skin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skill_dubs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGSStruct.Skin)
}
Skin::Skin(const Skin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skill_dubs_(from.skill_dubs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_path().empty()) {
    image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SGSStruct.Skin)
}

void Skin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Skin_generals_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Skin::~Skin() {
  // @@protoc_insertion_point(destructor:SGSStruct.Skin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Skin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Skin::ArenaDtor(void* object) {
  Skin* _this = reinterpret_cast< Skin* >(object);
  (void)_this;
}
void Skin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skin& Skin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Skin_generals_2eproto.base);
  return *internal_default_instance();
}


void Skin::Clear() {
// @@protoc_insertion_point(message_clear_start:SGSStruct.Skin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_dubs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.Skin.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.Skin.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.Skin.image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SGSStruct.SkillDub skill_dubs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill_dubs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Skin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGSStruct.Skin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.Skin.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.Skin.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string image_path = 3;
  if (this->image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_path().data(), static_cast<int>(this->_internal_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.Skin.image_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image_path(), target);
  }

  // repeated .SGSStruct.SkillDub skill_dubs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_dubs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_skill_dubs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGSStruct.Skin)
  return target;
}

size_t Skin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGSStruct.Skin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SGSStruct.SkillDub skill_dubs = 4;
  total_size += 1UL * this->_internal_skill_dubs_size();
  for (const auto& msg : this->skill_dubs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string image_path = 3;
  if (this->image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGSStruct.Skin)
  GOOGLE_DCHECK_NE(&from, this);
  const Skin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Skin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGSStruct.Skin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGSStruct.Skin)
    MergeFrom(*source);
  }
}

void Skin::MergeFrom(const Skin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGSStruct.Skin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_dubs_.MergeFrom(from.skill_dubs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.image_path().size() > 0) {
    _internal_set_image_path(from._internal_image_path());
  }
}

void Skin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGSStruct.Skin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skin::CopyFrom(const Skin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGSStruct.Skin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skin::IsInitialized() const {
  return true;
}

void Skin::InternalSwap(Skin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skill_dubs_.InternalSwap(&other->skill_dubs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_path_.Swap(&other->image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Skin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkillDub::InitAsDefaultInstance() {
}
class SkillDub::_Internal {
 public:
};

SkillDub::SkillDub(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dub_(arena),
  audio_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGSStruct.SkillDub)
}
SkillDub::SkillDub(const SkillDub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dub_(from.dub_),
      audio_(from.audio_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill().empty()) {
    skill_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_skill(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SGSStruct.SkillDub)
}

void SkillDub::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkillDub_generals_2eproto.base);
  skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SkillDub::~SkillDub() {
  // @@protoc_insertion_point(destructor:SGSStruct.SkillDub)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SkillDub::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  skill_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SkillDub::ArenaDtor(void* object) {
  SkillDub* _this = reinterpret_cast< SkillDub* >(object);
  (void)_this;
}
void SkillDub::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SkillDub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillDub& SkillDub::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillDub_generals_2eproto.base);
  return *internal_default_instance();
}


void SkillDub::Clear() {
// @@protoc_insertion_point(message_clear_start:SGSStruct.SkillDub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dub_.Clear();
  audio_.Clear();
  skill_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillDub::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string skill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_skill();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.SkillDub.skill"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dub();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.SkillDub.dub"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SGSStruct.Audio audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audio(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillDub::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGSStruct.SkillDub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string skill = 1;
  if (this->skill().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill().data(), static_cast<int>(this->_internal_skill().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.SkillDub.skill");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_skill(), target);
  }

  // repeated string dub = 2;
  for (int i = 0, n = this->_internal_dub_size(); i < n; i++) {
    const auto& s = this->_internal_dub(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.SkillDub.dub");
    target = stream->WriteString(2, s, target);
  }

  // repeated .SGSStruct.Audio audio = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audio_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_audio(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGSStruct.SkillDub)
  return target;
}

size_t SkillDub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGSStruct.SkillDub)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dub = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dub_.size());
  for (int i = 0, n = dub_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dub_.Get(i));
  }

  // repeated .SGSStruct.Audio audio = 3;
  total_size += 1UL * this->_internal_audio_size();
  for (const auto& msg : this->audio_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string skill = 1;
  if (this->skill().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillDub::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGSStruct.SkillDub)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillDub* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillDub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGSStruct.SkillDub)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGSStruct.SkillDub)
    MergeFrom(*source);
  }
}

void SkillDub::MergeFrom(const SkillDub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGSStruct.SkillDub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dub_.MergeFrom(from.dub_);
  audio_.MergeFrom(from.audio_);
  if (from.skill().size() > 0) {
    _internal_set_skill(from._internal_skill());
  }
}

void SkillDub::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGSStruct.SkillDub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDub::CopyFrom(const SkillDub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGSStruct.SkillDub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDub::IsInitialized() const {
  return true;
}

void SkillDub::InternalSwap(SkillDub* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dub_.InternalSwap(&other->dub_);
  audio_.InternalSwap(&other->audio_);
  skill_.Swap(&other->skill_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillDub::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Audio::InitAsDefaultInstance() {
}
class Audio::_Internal {
 public:
};

Audio::Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SGSStruct.Audio)
}
Audio::Audio(const Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dub().empty()) {
    dub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dub(),
      GetArena());
  }
  audio_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_path().empty()) {
    audio_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_audio_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SGSStruct.Audio)
}

void Audio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Audio_generals_2eproto.base);
  dub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Audio::~Audio() {
  // @@protoc_insertion_point(destructor:SGSStruct.Audio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Audio::ArenaDtor(void* object) {
  Audio* _this = reinterpret_cast< Audio* >(object);
  (void)_this;
}
void Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Audio& Audio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Audio_generals_2eproto.base);
  return *internal_default_instance();
}


void Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:SGSStruct.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dub_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.Audio.dub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audio_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audio_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SGSStruct.Audio.audio_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Audio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SGSStruct.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dub = 1;
  if (this->dub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dub().data(), static_cast<int>(this->_internal_dub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.Audio.dub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dub(), target);
  }

  // string audio_path = 2;
  if (this->audio_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_path().data(), static_cast<int>(this->_internal_audio_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SGSStruct.Audio.audio_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_audio_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SGSStruct.Audio)
  return target;
}

size_t Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGSStruct.Audio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dub = 1;
  if (this->dub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dub());
  }

  // string audio_path = 2;
  if (this->audio_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Audio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGSStruct.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Audio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Audio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGSStruct.Audio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGSStruct.Audio)
    MergeFrom(*source);
  }
}

void Audio::MergeFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGSStruct.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dub().size() > 0) {
    _internal_set_dub(from._internal_dub());
  }
  if (from.audio_path().size() > 0) {
    _internal_set_audio_path(from._internal_audio_path());
  }
}

void Audio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGSStruct.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audio::CopyFrom(const Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGSStruct.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audio::IsInitialized() const {
  return true;
}

void Audio::InternalSwap(Audio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dub_.Swap(&other->dub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_path_.Swap(&other->audio_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Audio::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SGSStruct
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SGSStruct::GeneralPool* Arena::CreateMaybeMessage< ::SGSStruct::GeneralPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGSStruct::GeneralPool >(arena);
}
template<> PROTOBUF_NOINLINE ::SGSStruct::General* Arena::CreateMaybeMessage< ::SGSStruct::General >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGSStruct::General >(arena);
}
template<> PROTOBUF_NOINLINE ::SGSStruct::Skin* Arena::CreateMaybeMessage< ::SGSStruct::Skin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGSStruct::Skin >(arena);
}
template<> PROTOBUF_NOINLINE ::SGSStruct::SkillDub* Arena::CreateMaybeMessage< ::SGSStruct::SkillDub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGSStruct::SkillDub >(arena);
}
template<> PROTOBUF_NOINLINE ::SGSStruct::Audio* Arena::CreateMaybeMessage< ::SGSStruct::Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SGSStruct::Audio >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
