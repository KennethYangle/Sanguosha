// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generals.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_generals_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_generals_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_generals_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_generals_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generals_2eproto;
namespace SGSStruct {
class Audio;
class AudioDefaultTypeInternal;
extern AudioDefaultTypeInternal _Audio_default_instance_;
class General;
class GeneralDefaultTypeInternal;
extern GeneralDefaultTypeInternal _General_default_instance_;
class GeneralPool;
class GeneralPoolDefaultTypeInternal;
extern GeneralPoolDefaultTypeInternal _GeneralPool_default_instance_;
class SkillDub;
class SkillDubDefaultTypeInternal;
extern SkillDubDefaultTypeInternal _SkillDub_default_instance_;
class Skin;
class SkinDefaultTypeInternal;
extern SkinDefaultTypeInternal _Skin_default_instance_;
}  // namespace SGSStruct
PROTOBUF_NAMESPACE_OPEN
template<> ::SGSStruct::Audio* Arena::CreateMaybeMessage<::SGSStruct::Audio>(Arena*);
template<> ::SGSStruct::General* Arena::CreateMaybeMessage<::SGSStruct::General>(Arena*);
template<> ::SGSStruct::GeneralPool* Arena::CreateMaybeMessage<::SGSStruct::GeneralPool>(Arena*);
template<> ::SGSStruct::SkillDub* Arena::CreateMaybeMessage<::SGSStruct::SkillDub>(Arena*);
template<> ::SGSStruct::Skin* Arena::CreateMaybeMessage<::SGSStruct::Skin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SGSStruct {

enum Country : int {
  Wei = 0,
  Shu = 1,
  Wu = 2,
  Qun = 3,
  Shen = 4,
  Country_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Country_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Country_IsValid(int value);
constexpr Country Country_MIN = Wei;
constexpr Country Country_MAX = Shen;
constexpr int Country_ARRAYSIZE = Country_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Country_descriptor();
template<typename T>
inline const std::string& Country_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Country>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Country_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Country_descriptor(), enum_t_value);
}
inline bool Country_Parse(
    const std::string& name, Country* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Country>(
    Country_descriptor(), name, value);
}
enum Gender : int {
  male = 0,
  female = 1,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = male;
constexpr Gender Gender_MAX = female;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class GeneralPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGSStruct.GeneralPool) */ {
 public:
  inline GeneralPool() : GeneralPool(nullptr) {};
  virtual ~GeneralPool();

  GeneralPool(const GeneralPool& from);
  GeneralPool(GeneralPool&& from) noexcept
    : GeneralPool() {
    *this = ::std::move(from);
  }

  inline GeneralPool& operator=(const GeneralPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralPool& operator=(GeneralPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralPool* internal_default_instance() {
    return reinterpret_cast<const GeneralPool*>(
               &_GeneralPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeneralPool& a, GeneralPool& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneralPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralPool* New() const final {
    return CreateMaybeMessage<GeneralPool>(nullptr);
  }

  GeneralPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralPool& from);
  void MergeFrom(const GeneralPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGSStruct.GeneralPool";
  }
  protected:
  explicit GeneralPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generals_2eproto);
    return ::descriptor_table_generals_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneralsFieldNumber = 1,
  };
  // repeated .SGSStruct.General generals = 1;
  int generals_size() const;
  private:
  int _internal_generals_size() const;
  public:
  void clear_generals();
  ::SGSStruct::General* mutable_generals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::General >*
      mutable_generals();
  private:
  const ::SGSStruct::General& _internal_generals(int index) const;
  ::SGSStruct::General* _internal_add_generals();
  public:
  const ::SGSStruct::General& generals(int index) const;
  ::SGSStruct::General* add_generals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::General >&
      generals() const;

  // @@protoc_insertion_point(class_scope:SGSStruct.GeneralPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::General > generals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generals_2eproto;
};
// -------------------------------------------------------------------

class General PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGSStruct.General) */ {
 public:
  inline General() : General(nullptr) {};
  virtual ~General();

  General(const General& from);
  General(General&& from) noexcept
    : General() {
    *this = ::std::move(from);
  }

  inline General& operator=(const General& from) {
    CopyFrom(from);
    return *this;
  }
  inline General& operator=(General&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const General& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const General* internal_default_instance() {
    return reinterpret_cast<const General*>(
               &_General_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(General& a, General& b) {
    a.Swap(&b);
  }
  inline void Swap(General* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(General* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline General* New() const final {
    return CreateMaybeMessage<General>(nullptr);
  }

  General* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<General>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const General& from);
  void MergeFrom(const General& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(General* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGSStruct.General";
  }
  protected:
  explicit General(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generals_2eproto);
    return ::descriptor_table_generals_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 6,
    kNameFieldNumber = 1,
    kTitleFieldNumber = 7,
    kDescriptionFieldNumber = 8,
    kPackageFirstFieldNumber = 9,
    kPackageSecondFieldNumber = 10,
    kSkinFieldNumber = 11,
    kCountryFieldNumber = 2,
    kGenderFieldNumber = 3,
    kInitPhysicalLimitFieldNumber = 4,
    kInitPhysicalValueFieldNumber = 5,
  };
  // repeated string skills = 6;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const char* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 7;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 8;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string package_first = 9;
  void clear_package_first();
  const std::string& package_first() const;
  void set_package_first(const std::string& value);
  void set_package_first(std::string&& value);
  void set_package_first(const char* value);
  void set_package_first(const char* value, size_t size);
  std::string* mutable_package_first();
  std::string* release_package_first();
  void set_allocated_package_first(std::string* package_first);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_package_first();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_package_first(
      std::string* package_first);
  private:
  const std::string& _internal_package_first() const;
  void _internal_set_package_first(const std::string& value);
  std::string* _internal_mutable_package_first();
  public:

  // string package_second = 10;
  void clear_package_second();
  const std::string& package_second() const;
  void set_package_second(const std::string& value);
  void set_package_second(std::string&& value);
  void set_package_second(const char* value);
  void set_package_second(const char* value, size_t size);
  std::string* mutable_package_second();
  std::string* release_package_second();
  void set_allocated_package_second(std::string* package_second);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_package_second();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_package_second(
      std::string* package_second);
  private:
  const std::string& _internal_package_second() const;
  void _internal_set_package_second(const std::string& value);
  std::string* _internal_mutable_package_second();
  public:

  // .SGSStruct.Skin skin = 11;
  bool has_skin() const;
  private:
  bool _internal_has_skin() const;
  public:
  void clear_skin();
  const ::SGSStruct::Skin& skin() const;
  ::SGSStruct::Skin* release_skin();
  ::SGSStruct::Skin* mutable_skin();
  void set_allocated_skin(::SGSStruct::Skin* skin);
  private:
  const ::SGSStruct::Skin& _internal_skin() const;
  ::SGSStruct::Skin* _internal_mutable_skin();
  public:
  void unsafe_arena_set_allocated_skin(
      ::SGSStruct::Skin* skin);
  ::SGSStruct::Skin* unsafe_arena_release_skin();

  // .SGSStruct.Country country = 2;
  void clear_country();
  ::SGSStruct::Country country() const;
  void set_country(::SGSStruct::Country value);
  private:
  ::SGSStruct::Country _internal_country() const;
  void _internal_set_country(::SGSStruct::Country value);
  public:

  // .SGSStruct.Gender gender = 3;
  void clear_gender();
  ::SGSStruct::Gender gender() const;
  void set_gender(::SGSStruct::Gender value);
  private:
  ::SGSStruct::Gender _internal_gender() const;
  void _internal_set_gender(::SGSStruct::Gender value);
  public:

  // int32 init_physical_limit = 4;
  void clear_init_physical_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 init_physical_limit() const;
  void set_init_physical_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_init_physical_limit() const;
  void _internal_set_init_physical_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 init_physical_value = 5;
  void clear_init_physical_value();
  ::PROTOBUF_NAMESPACE_ID::int32 init_physical_value() const;
  void set_init_physical_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_init_physical_value() const;
  void _internal_set_init_physical_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SGSStruct.General)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_first_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_second_;
  ::SGSStruct::Skin* skin_;
  int country_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_physical_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_physical_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generals_2eproto;
};
// -------------------------------------------------------------------

class Skin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGSStruct.Skin) */ {
 public:
  inline Skin() : Skin(nullptr) {};
  virtual ~Skin();

  Skin(const Skin& from);
  Skin(Skin&& from) noexcept
    : Skin() {
    *this = ::std::move(from);
  }

  inline Skin& operator=(const Skin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Skin& operator=(Skin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Skin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Skin* internal_default_instance() {
    return reinterpret_cast<const Skin*>(
               &_Skin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Skin& a, Skin& b) {
    a.Swap(&b);
  }
  inline void Swap(Skin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Skin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Skin* New() const final {
    return CreateMaybeMessage<Skin>(nullptr);
  }

  Skin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Skin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Skin& from);
  void MergeFrom(const Skin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Skin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGSStruct.Skin";
  }
  protected:
  explicit Skin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generals_2eproto);
    return ::descriptor_table_generals_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillDubsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kImagePathFieldNumber = 3,
  };
  // repeated .SGSStruct.SkillDub skill_dubs = 4;
  int skill_dubs_size() const;
  private:
  int _internal_skill_dubs_size() const;
  public:
  void clear_skill_dubs();
  ::SGSStruct::SkillDub* mutable_skill_dubs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::SkillDub >*
      mutable_skill_dubs();
  private:
  const ::SGSStruct::SkillDub& _internal_skill_dubs(int index) const;
  ::SGSStruct::SkillDub* _internal_add_skill_dubs();
  public:
  const ::SGSStruct::SkillDub& skill_dubs(int index) const;
  ::SGSStruct::SkillDub* add_skill_dubs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::SkillDub >&
      skill_dubs() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string image_path = 3;
  void clear_image_path();
  const std::string& image_path() const;
  void set_image_path(const std::string& value);
  void set_image_path(std::string&& value);
  void set_image_path(const char* value);
  void set_image_path(const char* value, size_t size);
  std::string* mutable_image_path();
  std::string* release_image_path();
  void set_allocated_image_path(std::string* image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_path(
      std::string* image_path);
  private:
  const std::string& _internal_image_path() const;
  void _internal_set_image_path(const std::string& value);
  std::string* _internal_mutable_image_path();
  public:

  // @@protoc_insertion_point(class_scope:SGSStruct.Skin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::SkillDub > skill_dubs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generals_2eproto;
};
// -------------------------------------------------------------------

class SkillDub PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGSStruct.SkillDub) */ {
 public:
  inline SkillDub() : SkillDub(nullptr) {};
  virtual ~SkillDub();

  SkillDub(const SkillDub& from);
  SkillDub(SkillDub&& from) noexcept
    : SkillDub() {
    *this = ::std::move(from);
  }

  inline SkillDub& operator=(const SkillDub& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillDub& operator=(SkillDub&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillDub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillDub* internal_default_instance() {
    return reinterpret_cast<const SkillDub*>(
               &_SkillDub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SkillDub& a, SkillDub& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillDub* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillDub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillDub* New() const final {
    return CreateMaybeMessage<SkillDub>(nullptr);
  }

  SkillDub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillDub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillDub& from);
  void MergeFrom(const SkillDub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillDub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGSStruct.SkillDub";
  }
  protected:
  explicit SkillDub(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generals_2eproto);
    return ::descriptor_table_generals_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDubFieldNumber = 2,
    kAudioFieldNumber = 3,
    kSkillFieldNumber = 1,
  };
  // repeated string dub = 2;
  int dub_size() const;
  private:
  int _internal_dub_size() const;
  public:
  void clear_dub();
  const std::string& dub(int index) const;
  std::string* mutable_dub(int index);
  void set_dub(int index, const std::string& value);
  void set_dub(int index, std::string&& value);
  void set_dub(int index, const char* value);
  void set_dub(int index, const char* value, size_t size);
  std::string* add_dub();
  void add_dub(const std::string& value);
  void add_dub(std::string&& value);
  void add_dub(const char* value);
  void add_dub(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dub() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dub();
  private:
  const std::string& _internal_dub(int index) const;
  std::string* _internal_add_dub();
  public:

  // repeated .SGSStruct.Audio audio = 3;
  int audio_size() const;
  private:
  int _internal_audio_size() const;
  public:
  void clear_audio();
  ::SGSStruct::Audio* mutable_audio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::Audio >*
      mutable_audio();
  private:
  const ::SGSStruct::Audio& _internal_audio(int index) const;
  ::SGSStruct::Audio* _internal_add_audio();
  public:
  const ::SGSStruct::Audio& audio(int index) const;
  ::SGSStruct::Audio* add_audio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::Audio >&
      audio() const;

  // string skill = 1;
  void clear_skill();
  const std::string& skill() const;
  void set_skill(const std::string& value);
  void set_skill(std::string&& value);
  void set_skill(const char* value);
  void set_skill(const char* value, size_t size);
  std::string* mutable_skill();
  std::string* release_skill();
  void set_allocated_skill(std::string* skill);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_skill();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill(
      std::string* skill);
  private:
  const std::string& _internal_skill() const;
  void _internal_set_skill(const std::string& value);
  std::string* _internal_mutable_skill();
  public:

  // @@protoc_insertion_point(class_scope:SGSStruct.SkillDub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dub_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::Audio > audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generals_2eproto;
};
// -------------------------------------------------------------------

class Audio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SGSStruct.Audio) */ {
 public:
  inline Audio() : Audio(nullptr) {};
  virtual ~Audio();

  Audio(const Audio& from);
  Audio(Audio&& from) noexcept
    : Audio() {
    *this = ::std::move(from);
  }

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Audio& operator=(Audio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Audio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Audio* internal_default_instance() {
    return reinterpret_cast<const Audio*>(
               &_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Audio& a, Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(Audio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Audio* New() const final {
    return CreateMaybeMessage<Audio>(nullptr);
  }

  Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Audio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Audio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SGSStruct.Audio";
  }
  protected:
  explicit Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generals_2eproto);
    return ::descriptor_table_generals_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDubFieldNumber = 1,
    kAudioPathFieldNumber = 2,
  };
  // string dub = 1;
  void clear_dub();
  const std::string& dub() const;
  void set_dub(const std::string& value);
  void set_dub(std::string&& value);
  void set_dub(const char* value);
  void set_dub(const char* value, size_t size);
  std::string* mutable_dub();
  std::string* release_dub();
  void set_allocated_dub(std::string* dub);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dub();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dub(
      std::string* dub);
  private:
  const std::string& _internal_dub() const;
  void _internal_set_dub(const std::string& value);
  std::string* _internal_mutable_dub();
  public:

  // string audio_path = 2;
  void clear_audio_path();
  const std::string& audio_path() const;
  void set_audio_path(const std::string& value);
  void set_audio_path(std::string&& value);
  void set_audio_path(const char* value);
  void set_audio_path(const char* value, size_t size);
  std::string* mutable_audio_path();
  std::string* release_audio_path();
  void set_allocated_audio_path(std::string* audio_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_path(
      std::string* audio_path);
  private:
  const std::string& _internal_audio_path() const;
  void _internal_set_audio_path(const std::string& value);
  std::string* _internal_mutable_audio_path();
  public:

  // @@protoc_insertion_point(class_scope:SGSStruct.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generals_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralPool

// repeated .SGSStruct.General generals = 1;
inline int GeneralPool::_internal_generals_size() const {
  return generals_.size();
}
inline int GeneralPool::generals_size() const {
  return _internal_generals_size();
}
inline void GeneralPool::clear_generals() {
  generals_.Clear();
}
inline ::SGSStruct::General* GeneralPool::mutable_generals(int index) {
  // @@protoc_insertion_point(field_mutable:SGSStruct.GeneralPool.generals)
  return generals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::General >*
GeneralPool::mutable_generals() {
  // @@protoc_insertion_point(field_mutable_list:SGSStruct.GeneralPool.generals)
  return &generals_;
}
inline const ::SGSStruct::General& GeneralPool::_internal_generals(int index) const {
  return generals_.Get(index);
}
inline const ::SGSStruct::General& GeneralPool::generals(int index) const {
  // @@protoc_insertion_point(field_get:SGSStruct.GeneralPool.generals)
  return _internal_generals(index);
}
inline ::SGSStruct::General* GeneralPool::_internal_add_generals() {
  return generals_.Add();
}
inline ::SGSStruct::General* GeneralPool::add_generals() {
  // @@protoc_insertion_point(field_add:SGSStruct.GeneralPool.generals)
  return _internal_add_generals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::General >&
GeneralPool::generals() const {
  // @@protoc_insertion_point(field_list:SGSStruct.GeneralPool.generals)
  return generals_;
}

// -------------------------------------------------------------------

// General

// string name = 1;
inline void General::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& General::name() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.name)
  return _internal_name();
}
inline void General::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.name)
}
inline std::string* General::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.name)
  return _internal_mutable_name();
}
inline const std::string& General::_internal_name() const {
  return name_.Get();
}
inline void General::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void General::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.General.name)
}
inline void General::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.name)
}
inline void General::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.name)
}
inline std::string* General::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* General::release_name() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void General::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.name)
}
inline std::string* General::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.General.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void General::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.name)
}

// .SGSStruct.Country country = 2;
inline void General::clear_country() {
  country_ = 0;
}
inline ::SGSStruct::Country General::_internal_country() const {
  return static_cast< ::SGSStruct::Country >(country_);
}
inline ::SGSStruct::Country General::country() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.country)
  return _internal_country();
}
inline void General::_internal_set_country(::SGSStruct::Country value) {
  
  country_ = value;
}
inline void General::set_country(::SGSStruct::Country value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.country)
}

// .SGSStruct.Gender gender = 3;
inline void General::clear_gender() {
  gender_ = 0;
}
inline ::SGSStruct::Gender General::_internal_gender() const {
  return static_cast< ::SGSStruct::Gender >(gender_);
}
inline ::SGSStruct::Gender General::gender() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.gender)
  return _internal_gender();
}
inline void General::_internal_set_gender(::SGSStruct::Gender value) {
  
  gender_ = value;
}
inline void General::set_gender(::SGSStruct::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.gender)
}

// int32 init_physical_limit = 4;
inline void General::clear_init_physical_limit() {
  init_physical_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 General::_internal_init_physical_limit() const {
  return init_physical_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 General::init_physical_limit() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.init_physical_limit)
  return _internal_init_physical_limit();
}
inline void General::_internal_set_init_physical_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  init_physical_limit_ = value;
}
inline void General::set_init_physical_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_init_physical_limit(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.init_physical_limit)
}

// int32 init_physical_value = 5;
inline void General::clear_init_physical_value() {
  init_physical_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 General::_internal_init_physical_value() const {
  return init_physical_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 General::init_physical_value() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.init_physical_value)
  return _internal_init_physical_value();
}
inline void General::_internal_set_init_physical_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  init_physical_value_ = value;
}
inline void General::set_init_physical_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_init_physical_value(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.init_physical_value)
}

// repeated string skills = 6;
inline int General::_internal_skills_size() const {
  return skills_.size();
}
inline int General::skills_size() const {
  return _internal_skills_size();
}
inline void General::clear_skills() {
  skills_.Clear();
}
inline std::string* General::add_skills() {
  // @@protoc_insertion_point(field_add_mutable:SGSStruct.General.skills)
  return _internal_add_skills();
}
inline const std::string& General::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const std::string& General::skills(int index) const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.skills)
  return _internal_skills(index);
}
inline std::string* General::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.skills)
  return skills_.Mutable(index);
}
inline void General::set_skills(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SGSStruct.General.skills)
  skills_.Mutable(index)->assign(value);
}
inline void General::set_skills(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SGSStruct.General.skills)
  skills_.Mutable(index)->assign(std::move(value));
}
inline void General::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.skills)
}
inline void General::set_skills(int index, const char* value, size_t size) {
  skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.skills)
}
inline std::string* General::_internal_add_skills() {
  return skills_.Add();
}
inline void General::add_skills(const std::string& value) {
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SGSStruct.General.skills)
}
inline void General::add_skills(std::string&& value) {
  skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SGSStruct.General.skills)
}
inline void General::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SGSStruct.General.skills)
}
inline void General::add_skills(const char* value, size_t size) {
  skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SGSStruct.General.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
General::skills() const {
  // @@protoc_insertion_point(field_list:SGSStruct.General.skills)
  return skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
General::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:SGSStruct.General.skills)
  return &skills_;
}

// string title = 7;
inline void General::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& General::title() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.title)
  return _internal_title();
}
inline void General::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.title)
}
inline std::string* General::mutable_title() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.title)
  return _internal_mutable_title();
}
inline const std::string& General::_internal_title() const {
  return title_.Get();
}
inline void General::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void General::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.General.title)
}
inline void General::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.title)
}
inline void General::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.title)
}
inline std::string* General::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* General::release_title() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void General::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.title)
}
inline std::string* General::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.General.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void General::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.title)
}

// string description = 8;
inline void General::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& General::description() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.description)
  return _internal_description();
}
inline void General::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.description)
}
inline std::string* General::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.description)
  return _internal_mutable_description();
}
inline const std::string& General::_internal_description() const {
  return description_.Get();
}
inline void General::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void General::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.General.description)
}
inline void General::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.description)
}
inline void General::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.description)
}
inline std::string* General::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* General::release_description() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void General::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.description)
}
inline std::string* General::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.General.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void General::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.description)
}

// string package_first = 9;
inline void General::clear_package_first() {
  package_first_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& General::package_first() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.package_first)
  return _internal_package_first();
}
inline void General::set_package_first(const std::string& value) {
  _internal_set_package_first(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.package_first)
}
inline std::string* General::mutable_package_first() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.package_first)
  return _internal_mutable_package_first();
}
inline const std::string& General::_internal_package_first() const {
  return package_first_.Get();
}
inline void General::_internal_set_package_first(const std::string& value) {
  
  package_first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void General::set_package_first(std::string&& value) {
  
  package_first_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.General.package_first)
}
inline void General::set_package_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.package_first)
}
inline void General::set_package_first(const char* value,
    size_t size) {
  
  package_first_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.package_first)
}
inline std::string* General::_internal_mutable_package_first() {
  
  return package_first_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* General::release_package_first() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.package_first)
  return package_first_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void General::set_allocated_package_first(std::string* package_first) {
  if (package_first != nullptr) {
    
  } else {
    
  }
  package_first_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_first,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.package_first)
}
inline std::string* General::unsafe_arena_release_package_first() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.General.package_first)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return package_first_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void General::unsafe_arena_set_allocated_package_first(
    std::string* package_first) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (package_first != nullptr) {
    
  } else {
    
  }
  package_first_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      package_first, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.package_first)
}

// string package_second = 10;
inline void General::clear_package_second() {
  package_second_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& General::package_second() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.package_second)
  return _internal_package_second();
}
inline void General::set_package_second(const std::string& value) {
  _internal_set_package_second(value);
  // @@protoc_insertion_point(field_set:SGSStruct.General.package_second)
}
inline std::string* General::mutable_package_second() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.package_second)
  return _internal_mutable_package_second();
}
inline const std::string& General::_internal_package_second() const {
  return package_second_.Get();
}
inline void General::_internal_set_package_second(const std::string& value) {
  
  package_second_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void General::set_package_second(std::string&& value) {
  
  package_second_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.General.package_second)
}
inline void General::set_package_second(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_second_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.General.package_second)
}
inline void General::set_package_second(const char* value,
    size_t size) {
  
  package_second_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.General.package_second)
}
inline std::string* General::_internal_mutable_package_second() {
  
  return package_second_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* General::release_package_second() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.package_second)
  return package_second_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void General::set_allocated_package_second(std::string* package_second) {
  if (package_second != nullptr) {
    
  } else {
    
  }
  package_second_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_second,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.package_second)
}
inline std::string* General::unsafe_arena_release_package_second() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.General.package_second)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return package_second_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void General::unsafe_arena_set_allocated_package_second(
    std::string* package_second) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (package_second != nullptr) {
    
  } else {
    
  }
  package_second_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      package_second, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.package_second)
}

// .SGSStruct.Skin skin = 11;
inline bool General::_internal_has_skin() const {
  return this != internal_default_instance() && skin_ != nullptr;
}
inline bool General::has_skin() const {
  return _internal_has_skin();
}
inline void General::clear_skin() {
  if (GetArena() == nullptr && skin_ != nullptr) {
    delete skin_;
  }
  skin_ = nullptr;
}
inline const ::SGSStruct::Skin& General::_internal_skin() const {
  const ::SGSStruct::Skin* p = skin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SGSStruct::Skin*>(
      &::SGSStruct::_Skin_default_instance_);
}
inline const ::SGSStruct::Skin& General::skin() const {
  // @@protoc_insertion_point(field_get:SGSStruct.General.skin)
  return _internal_skin();
}
inline void General::unsafe_arena_set_allocated_skin(
    ::SGSStruct::Skin* skin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skin_);
  }
  skin_ = skin;
  if (skin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.General.skin)
}
inline ::SGSStruct::Skin* General::release_skin() {
  auto temp = unsafe_arena_release_skin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SGSStruct::Skin* General::unsafe_arena_release_skin() {
  // @@protoc_insertion_point(field_release:SGSStruct.General.skin)
  
  ::SGSStruct::Skin* temp = skin_;
  skin_ = nullptr;
  return temp;
}
inline ::SGSStruct::Skin* General::_internal_mutable_skin() {
  
  if (skin_ == nullptr) {
    auto* p = CreateMaybeMessage<::SGSStruct::Skin>(GetArena());
    skin_ = p;
  }
  return skin_;
}
inline ::SGSStruct::Skin* General::mutable_skin() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.General.skin)
  return _internal_mutable_skin();
}
inline void General::set_allocated_skin(::SGSStruct::Skin* skin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete skin_;
  }
  if (skin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(skin);
    if (message_arena != submessage_arena) {
      skin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skin, submessage_arena);
    }
    
  } else {
    
  }
  skin_ = skin;
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.General.skin)
}

// -------------------------------------------------------------------

// Skin

// string name = 1;
inline void Skin::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Skin::name() const {
  // @@protoc_insertion_point(field_get:SGSStruct.Skin.name)
  return _internal_name();
}
inline void Skin::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SGSStruct.Skin.name)
}
inline std::string* Skin::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Skin.name)
  return _internal_mutable_name();
}
inline const std::string& Skin::_internal_name() const {
  return name_.Get();
}
inline void Skin::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Skin::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.Skin.name)
}
inline void Skin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.Skin.name)
}
inline void Skin::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.Skin.name)
}
inline std::string* Skin::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Skin::release_name() {
  // @@protoc_insertion_point(field_release:SGSStruct.Skin.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Skin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.Skin.name)
}
inline std::string* Skin::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.Skin.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Skin::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.Skin.name)
}

// string description = 2;
inline void Skin::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Skin::description() const {
  // @@protoc_insertion_point(field_get:SGSStruct.Skin.description)
  return _internal_description();
}
inline void Skin::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SGSStruct.Skin.description)
}
inline std::string* Skin::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Skin.description)
  return _internal_mutable_description();
}
inline const std::string& Skin::_internal_description() const {
  return description_.Get();
}
inline void Skin::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Skin::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.Skin.description)
}
inline void Skin::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.Skin.description)
}
inline void Skin::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.Skin.description)
}
inline std::string* Skin::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Skin::release_description() {
  // @@protoc_insertion_point(field_release:SGSStruct.Skin.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Skin::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.Skin.description)
}
inline std::string* Skin::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.Skin.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Skin::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.Skin.description)
}

// string image_path = 3;
inline void Skin::clear_image_path() {
  image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Skin::image_path() const {
  // @@protoc_insertion_point(field_get:SGSStruct.Skin.image_path)
  return _internal_image_path();
}
inline void Skin::set_image_path(const std::string& value) {
  _internal_set_image_path(value);
  // @@protoc_insertion_point(field_set:SGSStruct.Skin.image_path)
}
inline std::string* Skin::mutable_image_path() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Skin.image_path)
  return _internal_mutable_image_path();
}
inline const std::string& Skin::_internal_image_path() const {
  return image_path_.Get();
}
inline void Skin::_internal_set_image_path(const std::string& value) {
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Skin::set_image_path(std::string&& value) {
  
  image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.Skin.image_path)
}
inline void Skin::set_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.Skin.image_path)
}
inline void Skin::set_image_path(const char* value,
    size_t size) {
  
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.Skin.image_path)
}
inline std::string* Skin::_internal_mutable_image_path() {
  
  return image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Skin::release_image_path() {
  // @@protoc_insertion_point(field_release:SGSStruct.Skin.image_path)
  return image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Skin::set_allocated_image_path(std::string* image_path) {
  if (image_path != nullptr) {
    
  } else {
    
  }
  image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.Skin.image_path)
}
inline std::string* Skin::unsafe_arena_release_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.Skin.image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Skin::unsafe_arena_set_allocated_image_path(
    std::string* image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_path != nullptr) {
    
  } else {
    
  }
  image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.Skin.image_path)
}

// repeated .SGSStruct.SkillDub skill_dubs = 4;
inline int Skin::_internal_skill_dubs_size() const {
  return skill_dubs_.size();
}
inline int Skin::skill_dubs_size() const {
  return _internal_skill_dubs_size();
}
inline void Skin::clear_skill_dubs() {
  skill_dubs_.Clear();
}
inline ::SGSStruct::SkillDub* Skin::mutable_skill_dubs(int index) {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Skin.skill_dubs)
  return skill_dubs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::SkillDub >*
Skin::mutable_skill_dubs() {
  // @@protoc_insertion_point(field_mutable_list:SGSStruct.Skin.skill_dubs)
  return &skill_dubs_;
}
inline const ::SGSStruct::SkillDub& Skin::_internal_skill_dubs(int index) const {
  return skill_dubs_.Get(index);
}
inline const ::SGSStruct::SkillDub& Skin::skill_dubs(int index) const {
  // @@protoc_insertion_point(field_get:SGSStruct.Skin.skill_dubs)
  return _internal_skill_dubs(index);
}
inline ::SGSStruct::SkillDub* Skin::_internal_add_skill_dubs() {
  return skill_dubs_.Add();
}
inline ::SGSStruct::SkillDub* Skin::add_skill_dubs() {
  // @@protoc_insertion_point(field_add:SGSStruct.Skin.skill_dubs)
  return _internal_add_skill_dubs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::SkillDub >&
Skin::skill_dubs() const {
  // @@protoc_insertion_point(field_list:SGSStruct.Skin.skill_dubs)
  return skill_dubs_;
}

// -------------------------------------------------------------------

// SkillDub

// string skill = 1;
inline void SkillDub::clear_skill() {
  skill_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SkillDub::skill() const {
  // @@protoc_insertion_point(field_get:SGSStruct.SkillDub.skill)
  return _internal_skill();
}
inline void SkillDub::set_skill(const std::string& value) {
  _internal_set_skill(value);
  // @@protoc_insertion_point(field_set:SGSStruct.SkillDub.skill)
}
inline std::string* SkillDub::mutable_skill() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.SkillDub.skill)
  return _internal_mutable_skill();
}
inline const std::string& SkillDub::_internal_skill() const {
  return skill_.Get();
}
inline void SkillDub::_internal_set_skill(const std::string& value) {
  
  skill_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SkillDub::set_skill(std::string&& value) {
  
  skill_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.SkillDub.skill)
}
inline void SkillDub::set_skill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.SkillDub.skill)
}
inline void SkillDub::set_skill(const char* value,
    size_t size) {
  
  skill_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.SkillDub.skill)
}
inline std::string* SkillDub::_internal_mutable_skill() {
  
  return skill_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SkillDub::release_skill() {
  // @@protoc_insertion_point(field_release:SGSStruct.SkillDub.skill)
  return skill_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SkillDub::set_allocated_skill(std::string* skill) {
  if (skill != nullptr) {
    
  } else {
    
  }
  skill_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.SkillDub.skill)
}
inline std::string* SkillDub::unsafe_arena_release_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.SkillDub.skill)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return skill_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SkillDub::unsafe_arena_set_allocated_skill(
    std::string* skill) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (skill != nullptr) {
    
  } else {
    
  }
  skill_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      skill, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.SkillDub.skill)
}

// repeated string dub = 2;
inline int SkillDub::_internal_dub_size() const {
  return dub_.size();
}
inline int SkillDub::dub_size() const {
  return _internal_dub_size();
}
inline void SkillDub::clear_dub() {
  dub_.Clear();
}
inline std::string* SkillDub::add_dub() {
  // @@protoc_insertion_point(field_add_mutable:SGSStruct.SkillDub.dub)
  return _internal_add_dub();
}
inline const std::string& SkillDub::_internal_dub(int index) const {
  return dub_.Get(index);
}
inline const std::string& SkillDub::dub(int index) const {
  // @@protoc_insertion_point(field_get:SGSStruct.SkillDub.dub)
  return _internal_dub(index);
}
inline std::string* SkillDub::mutable_dub(int index) {
  // @@protoc_insertion_point(field_mutable:SGSStruct.SkillDub.dub)
  return dub_.Mutable(index);
}
inline void SkillDub::set_dub(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SGSStruct.SkillDub.dub)
  dub_.Mutable(index)->assign(value);
}
inline void SkillDub::set_dub(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SGSStruct.SkillDub.dub)
  dub_.Mutable(index)->assign(std::move(value));
}
inline void SkillDub::set_dub(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dub_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SGSStruct.SkillDub.dub)
}
inline void SkillDub::set_dub(int index, const char* value, size_t size) {
  dub_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.SkillDub.dub)
}
inline std::string* SkillDub::_internal_add_dub() {
  return dub_.Add();
}
inline void SkillDub::add_dub(const std::string& value) {
  dub_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SGSStruct.SkillDub.dub)
}
inline void SkillDub::add_dub(std::string&& value) {
  dub_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SGSStruct.SkillDub.dub)
}
inline void SkillDub::add_dub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dub_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SGSStruct.SkillDub.dub)
}
inline void SkillDub::add_dub(const char* value, size_t size) {
  dub_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SGSStruct.SkillDub.dub)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SkillDub::dub() const {
  // @@protoc_insertion_point(field_list:SGSStruct.SkillDub.dub)
  return dub_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SkillDub::mutable_dub() {
  // @@protoc_insertion_point(field_mutable_list:SGSStruct.SkillDub.dub)
  return &dub_;
}

// repeated .SGSStruct.Audio audio = 3;
inline int SkillDub::_internal_audio_size() const {
  return audio_.size();
}
inline int SkillDub::audio_size() const {
  return _internal_audio_size();
}
inline void SkillDub::clear_audio() {
  audio_.Clear();
}
inline ::SGSStruct::Audio* SkillDub::mutable_audio(int index) {
  // @@protoc_insertion_point(field_mutable:SGSStruct.SkillDub.audio)
  return audio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::Audio >*
SkillDub::mutable_audio() {
  // @@protoc_insertion_point(field_mutable_list:SGSStruct.SkillDub.audio)
  return &audio_;
}
inline const ::SGSStruct::Audio& SkillDub::_internal_audio(int index) const {
  return audio_.Get(index);
}
inline const ::SGSStruct::Audio& SkillDub::audio(int index) const {
  // @@protoc_insertion_point(field_get:SGSStruct.SkillDub.audio)
  return _internal_audio(index);
}
inline ::SGSStruct::Audio* SkillDub::_internal_add_audio() {
  return audio_.Add();
}
inline ::SGSStruct::Audio* SkillDub::add_audio() {
  // @@protoc_insertion_point(field_add:SGSStruct.SkillDub.audio)
  return _internal_add_audio();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SGSStruct::Audio >&
SkillDub::audio() const {
  // @@protoc_insertion_point(field_list:SGSStruct.SkillDub.audio)
  return audio_;
}

// -------------------------------------------------------------------

// Audio

// string dub = 1;
inline void Audio::clear_dub() {
  dub_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::dub() const {
  // @@protoc_insertion_point(field_get:SGSStruct.Audio.dub)
  return _internal_dub();
}
inline void Audio::set_dub(const std::string& value) {
  _internal_set_dub(value);
  // @@protoc_insertion_point(field_set:SGSStruct.Audio.dub)
}
inline std::string* Audio::mutable_dub() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Audio.dub)
  return _internal_mutable_dub();
}
inline const std::string& Audio::_internal_dub() const {
  return dub_.Get();
}
inline void Audio::_internal_set_dub(const std::string& value) {
  
  dub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_dub(std::string&& value) {
  
  dub_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.Audio.dub)
}
inline void Audio::set_dub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.Audio.dub)
}
inline void Audio::set_dub(const char* value,
    size_t size) {
  
  dub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.Audio.dub)
}
inline std::string* Audio::_internal_mutable_dub() {
  
  return dub_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_dub() {
  // @@protoc_insertion_point(field_release:SGSStruct.Audio.dub)
  return dub_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_dub(std::string* dub) {
  if (dub != nullptr) {
    
  } else {
    
  }
  dub_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dub,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.Audio.dub)
}
inline std::string* Audio::unsafe_arena_release_dub() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.Audio.dub)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dub_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Audio::unsafe_arena_set_allocated_dub(
    std::string* dub) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dub != nullptr) {
    
  } else {
    
  }
  dub_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dub, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.Audio.dub)
}

// string audio_path = 2;
inline void Audio::clear_audio_path() {
  audio_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Audio::audio_path() const {
  // @@protoc_insertion_point(field_get:SGSStruct.Audio.audio_path)
  return _internal_audio_path();
}
inline void Audio::set_audio_path(const std::string& value) {
  _internal_set_audio_path(value);
  // @@protoc_insertion_point(field_set:SGSStruct.Audio.audio_path)
}
inline std::string* Audio::mutable_audio_path() {
  // @@protoc_insertion_point(field_mutable:SGSStruct.Audio.audio_path)
  return _internal_mutable_audio_path();
}
inline const std::string& Audio::_internal_audio_path() const {
  return audio_path_.Get();
}
inline void Audio::_internal_set_audio_path(const std::string& value) {
  
  audio_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Audio::set_audio_path(std::string&& value) {
  
  audio_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SGSStruct.Audio.audio_path)
}
inline void Audio::set_audio_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SGSStruct.Audio.audio_path)
}
inline void Audio::set_audio_path(const char* value,
    size_t size) {
  
  audio_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SGSStruct.Audio.audio_path)
}
inline std::string* Audio::_internal_mutable_audio_path() {
  
  return audio_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Audio::release_audio_path() {
  // @@protoc_insertion_point(field_release:SGSStruct.Audio.audio_path)
  return audio_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Audio::set_allocated_audio_path(std::string* audio_path) {
  if (audio_path != nullptr) {
    
  } else {
    
  }
  audio_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SGSStruct.Audio.audio_path)
}
inline std::string* Audio::unsafe_arena_release_audio_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SGSStruct.Audio.audio_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Audio::unsafe_arena_set_allocated_audio_path(
    std::string* audio_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio_path != nullptr) {
    
  } else {
    
  }
  audio_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SGSStruct.Audio.audio_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SGSStruct

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SGSStruct::Country> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SGSStruct::Country>() {
  return ::SGSStruct::Country_descriptor();
}
template <> struct is_proto_enum< ::SGSStruct::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SGSStruct::Gender>() {
  return ::SGSStruct::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_generals_2eproto
